_focusTimer = null

$.widget("custom.timebar", {

    // Default options.
    options: {
        allowAMPM: true
    },
    _create: function (inputOptions) {
        if (inputOptions)
            options = inputOptions;

        var _element = this.element;
        var _options = this.options;
        _element.attr("readonly", "readonly");

        this.element.focusin(function () {
            $(".timebarpicker").remove();

            var values = $(_element).val().split(/[: ]+/);
            var hours = "00";
            var minutes = "00";
            var ampmStatus = "AM";
            if (values.length > 0 && values[0] != "")
            {
                hours = values[0]
            }
            if (values.length > 1) {
                minutes = values[1]
            }
            if (values.length > 2) {
                ampmStatus = values[2]
            }

            $(_element).after("" +
                "<div class='timebarpicker' style='box-shadow:0 2px 1px 0 rgba(0,0,0,.2); z-index:999; background:#fff; padding:20px 10px; overflow:auto; border:solid 1px #ddd; top: " + ($(_element).offset().top + $(_element).outerHeight() - 1) + "px; left: " + $(_element).offset().left + "px; min-width:" + $(_element).outerWidth() + "px; box-sizing:border-box; position:absolute;'>" +
                    "<input class='timebarpickerHours' value='" + hours + "' style='width:50px; float:left; padding:4px;' tabindex='" + $(_element).attr("tabindex") + "'/>" +
                    "<span style='float:left; padding:4px'>:</span>" +
                    "<input class='timebarpickerMinutes' value='" + minutes + "' style='width:50px; float:left; padding:4px;' tabindex='" + $(_element).attr("tabindex") + "'/>" +

                    ((_options.allowAMPM) ? "<span style='float:left; padding:4px'>&nbsp;</span>" + 
                    "<input class='timebarpickerAMPM' value='" + ampmStatus + "' style='width:50px; float:left; padding:4px;' tabindex='" + $(_element).attr("tabindex") + "'/>" : "") +
                "</div>");
          
            if (_focusTimer != null) {
                clearTimeout(_focusTimer);
            }

            $(".timebarpickerHours, .timebarpickerMinutes, .timebarpickerAMPM").focusin(function () {
                if (_focusTimer) {
                    clearTimeout(_focusTimer);
                }
            })

            $(".timebarpickerHours, .timebarpickerMinutes, .timebarpickerAMPM").focusout(function () {
                _focusTimer = setTimeout(function () {
                    $(".timebarpicker").hide();
                },
                100);
            })

            $(".timebarpickerHours").focus().select();

            $(".timebarpickerHours, .timebarpickerMinutes, .timebarpickerAMPM").keydown(function (e) {
                switch (e.keyCode) {
                    case 27: // esc
                        $(".timebarpicker").hide();
                        break;
                    case 13: // enter
                        $(":focus").next().next().focus().select();
                        break;
              /*      case 38: // up
                        break;
                    case 40: // down
                        break;*/
                    case 37: //left
                        $(":focus").prev().prev().focus();
                        break;
                    case 39: // right
                        $(":focus").next().next().focus();
                        break;
                }
            });

            $(".timebarpickerHours, .timebarpickerMinutes, .timebarpickerAMPM").keyup(function (e) {
                switch (e.keyCode) {
                    case 37: //left
                        $(":focus").select();
                        break;
                    case 39: // right
                        $(":focus").select();
                        break;
                }
            });

            $(".timebarpickerHours, .timebarpickerMinutes, .timebarpickerAMPM").change(function () {
                var intHours = parseInt($(".timebarpickerHours").val());
                if (isNaN(intHours))
                    intHours = 0;

                var intMinutes = parseInt($(".timebarpickerMinutes").val());
                if (isNaN(intMinutes))
                    intMinutes = 0;

                var ampm = $(".timebarpickerAMPM").val();
                if (!ampm)
                    ampm = "AM";

                if (ampm.toUpperCase() == "P")
                    ampm = "PM";

                if (ampm.toUpperCase() != "AM" && ampm.toUpperCase() != "PM")
                    ampm = "AM";

                if (_options.allowAMPM) {
                    if (intHours < 1)
                        intHours = 1;
                    if (intHours > 12)
                        intHours = 12;
                }
                else {
                    if (intHours < 0)
                        intHours = 0;
                    if (intHours > 23)
                        intHours = 23;
                }

                if (intMinutes < 0)
                    intMinutes = 0;
                if (intMinutes > 59)
                    intMinutes = 59;

                $(".timebarpickerHours").val(intHours < 10 ? "0" + intHours : intHours);
                $(".timebarpickerMinutes").val(intMinutes < 10 ? "0" + intMinutes : intMinutes);
                if (_options.allowAMPM) {
                    $(".timebarpickerAMPM").val(ampm.toUpperCase());
                }

                _element.val($(".timebarpickerHours").val() + ":" + $(".timebarpickerMinutes").val() + (_options.allowAMPM ? " " + $(".timebarpickerAMPM").val() : ""));
            })

        });
    }
});
/*
!function ($, window, document) {
    "use strict";
    function Wickedpicker(e, t) {
        this.element = $(e),
        this.elementTabindex = $(e).attr("tabindex"),
        this.options = $.extend({}, defaults, t),
        this.element.addClass("hasWickedpicker"),
        this.element.attr("onkeypress", "return false;"),
        this.element.attr("aria-showingpicker", "false"),
        this.createPicker(),
        this.timepicker = $(".wickedpicker"),
        this.up = $("." + this.options.upArrow),
        this.down = $("." + this.options.downArrow),
        this.separator = $(".wickedpicker__controls__control--separator"),
        this.hoursElem = $(".wickedpicker__controls__control--hours"),
        this.minutesElem = $(".wickedpicker__controls__control--minutes"),
        this.secondsElem = $(".wickedpicker__controls__control--seconds"),
        this.meridiemElem = $(".wickedpicker__controls__control--meridiem"),
        this.close = $("." + this.options.close);

        this.timepicker.css("width", this.element.css("width"));
        this.options.now = $(e).val();

        if (this.options.now == null || this.options.now == "") {
            this.options.now = "";
            this.selectedHour = 0;
            this.selectedMin = 0;
            this.selectedSec = 0;
            this.selectedMeridiem = "AM";

            this.setHoverState();
            this.attach(e);
            //   this.setText(e)
        }
        else {

            var i = this.timeArrayFromString(this.options.now);

            this.options.now = new Date(today.getFullYear(), today.getMonth(), today.getDate(), i[0], i[1], i[2]);
            this.selectedHour = this.parseHours(this.options.now.getHours());
            this.selectedMin = this.parseSecMin(this.options.now.getMinutes());
            this.selectedSec = this.parseSecMin(this.options.now.getSeconds());
            if (i[3] !== null) {
                this.selectedMeridiem = i[3];
            }
            else {
                this.selectedMeridiem = this.parseMeridiem(this.options.now.getHours());
            }

            this.setHoverState();
            this.attach(e);
            //    this.setText(e)
        }
    }

    "function" != typeof String.prototype.endsWith && (String.prototype.endsWith = function (e) {
        return e.length > 0 && this.substring(this.length - e.length, this.length) === e
    });

    var isMobile = function () {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    },

    today = new Date,
    pluginName = "wickedpicker",
    defaults = {
        now: "",//today.getHours() + ":" + today.getMinutes(),
        twentyFour: !1,
        upArrow: "wickedpicker__controls__control-up",
        downArrow: "wickedpicker__controls__control-down",
        close: "wickedpicker__close",
        hoverState: "hover-state",
        title: "Timepicker",
        showSeconds: !1,
        secondsInterval: 1,
        minutesInterval: 1,
        beforeShow: null,
        show: null,
        clearable: !1
    };

    function getNonNaN(value) {
        return isNaN(value) ? 0 : value;
    };
    function getNonNaNMeridiem(value) {
        return value == '' || value == undefined ? 'AM' : value;
    };

    $.extend(Wickedpicker.prototype, {
        showPicker: function (e) {
            "function" == typeof this.options.beforeShow && this.options.beforeShow(e, this.timepicker);
            var t = $(e).offset();

            if ($(e).attr({ "aria-showingpicker": "true" }),
                this.setText(e),
                this.showHideMeridiemControl(),
                this.getText(e) !== this.getTime()) {

                var i = this.getText(e).replace(/:/g, " ").split(" "), s = {};
                s.hours = getNonNaN(i[0]), s.minutes = getNonNaN(i[1]), this.options.showSeconds ? (s.seconds = getNonNaN(i[2]), s.meridiem = getNonNaNMeridiem(i[3])) : s.meridiem = getNonNaNMeridiem(i[2]), this.setTime(s)
            }


            this.timepicker.css({ "z-index": this.element.css("z-index") + 1, position: "absolute", left: t.left, top: t.top + $(e)[0].offsetHeight }).show(),

            "function" == typeof this.options.show && this.options.show(e, this.timepicker),
            this.handleTimeAdjustments(e)
        },
        hideTimepicker: function (e) {
            this.timepicker.hide();
            //    var i = { start: function () { var e = $.Deferred(); return $('[aria-showingpicker="true"]').attr("aria-showingpicker", "false"), e.promise() } };
            //    i.start().then(t(0));
        },
        createPicker: function () {
            if (0 === $(".wickedpicker").length) {
                var e = '<div class="wickedpicker"><p class="wickedpicker__title">' + this.options.title + '<span class="wickedpicker__close"></span></p><ul class="wickedpicker__controls"><li class="wickedpicker__controls__control"><span class="' + this.options.upArrow + '"></span><input type="text" class="wickedpicker__controls__control--hours" tabindex="' + this.elementTabindex + '" value="00" style="width:26px"/><span class="' + this.options.downArrow + '"></span></li><li class="wickedpicker__controls__control--separator"><span class="wickedpicker__controls__control--separator-inner">:</span></li><li class="wickedpicker__controls__control"><span class="' + this.options.upArrow + '"></span><input type="text" class="wickedpicker__controls__control--minutes" tabindex="' + this.elementTabindex + '" value="00" style="width:26px" /><span class="' + this.options.downArrow + '"></span></li>'; this.options.showSeconds && (e += '<li class="wickedpicker__controls__control--separator"><span class="wickedpicker__controls__control--separator-inner">:</span></li><li class="wickedpicker__controls__control"><span class="' + this.options.upArrow + '"></span><input type="text" class="wickedpicker__controls__control--seconds" tabindex="' + this.elementTabindex + '" value="00" style="width:26px" /><span class="' + this.options.downArrow + '"></span></li>'),
                e += '<li class="wickedpicker__controls__control"><span class="' + this.options.upArrow + '"></span><span class="wickedpicker__controls__control--meridiem" tabindex="221">AM</span><span class="' + this.options.downArrow + '"></span></li></ul></div>',

                $("body").append(e);

                $(".wickedpicker__controls input[type='text']").on("focus", function () {
                    $(this).select();
                });
                $(".wickedpicker__controls input[type='text']").on("click", function () {
                    $(this).select();
                });

                this.attachKeyboardEvents();
            }
        },
        showHideMeridiemControl: function () {
            this.options.twentyFour === !1 ? $(this.meridiemElem).parent().show() : $(this.meridiemElem).parent().hide()
        },
        showHideSecondsControl: function () {
            this.options.showSeconds ? $(this.secondsElem).parent().show() : $(this.secondsElem).parent().hide()
        },
        attach: function (e) {
            var t = this;
            this.options.clearable && t.makePickerInputClearable(e),

            $(e).on("click focus", function (e) {
                $(t.timepicker).is(":hidden") && (t.showPicker($(this)), $(t.hoursElem).focus())
            });
            var i = function (i) {
                $(t.timepicker).is(":visible") && ($(i.target).is(t.close) ? t.hideTimepicker(e) : $(i.target).closest(t.timepicker).length || $(i.target).closest($(".hasWickedpicker")).length ? i.stopPropagation() : t.hideTimepicker(e))
            };

            $(document).off("click", i).on("click", i);
        },
        attachKeyboardEvents: function () {
            $(document).on("keydown", $.proxy(function (e) {
                switch (e.keyCode) {
                    case 9:
                        console.log(e.target.className)

                        if (!this.options.twentyFour) {
                            if (e.target.className == "wickedpicker__controls__control--meridiem")
                                $(this.close).trigger("click");
                        } else {
                            if (e.target.className == "wickedpicker__controls__control--minutes")
                                $(this.close).trigger("click");
                        }

                        //    "hasWickedpicker" !== e.target.className && $(this.close).trigger("click");
                        break;
                    case 27:
                        $(this.close).trigger("click");
                        break;
                    case 37:
                        e.target.className !== this.hoursElem[0].className ? $(e.target).parent().prevAll("li").not(this.separator.selector).first().find("input").focus() : $(e.target).parent().siblings(":last").find("input").focus();
                        break;
                    case 39:
                        e.target.className !== this.meridiemElem[0].className ? $(e.target).parent().nextAll("li").not(this.separator.selector).first().find("input").focus() : $(e.target).parent().siblings(":first").find("input").focus();
                        break;
                    case 38:
                        $(":focus").prev().click();
                        break;
                    case 40:
                        $(":focus").next().click();
                        break;
                }
            }, this))
        },

        setTime: function (e) {
            this.setHours(e.hours);
            this.setMinutes(e.minutes);
            this.setMeridiem(e.meridiem);

            this.options.showSeconds && this.setSeconds(e.seconds);
        },
        getTime: function () {
            return [this.formatTime(this.getHours(), this.getMinutes(), this.getMeridiem(), this.getSeconds())]
        },
        setHours: function (e) {
            var t = new Date;
            t.setHours(e);
            var i = this.parseHours(t.getHours());
            this.hoursElem.val(i);
            this.selectedHour = i
        },
        getHours: function () {
            var e = new Date;
            return e.setHours(this.hoursElem.val()), e.getHours()
        },
        parseHours: function (e) {
            return this.options.twentyFour === !1 ? (e + 11) % 12 + 1 : 10 > e ? "0" + e : e
        },
        setMinutes: function (e) {
            var t = new Date; t.setMinutes(e); var i = t.getMinutes(), s = this.parseSecMin(i); this.minutesElem.val(s), this.selectedMin = s
        },
        getMinutes: function () {
            var e = new Date; return e.setMinutes(this.minutesElem.val()), e.getMinutes()
        },
        parseSecMin: function (e) {
            return (10 > e ? "0" : "") + e
        },
        setMeridiem: function (e) {
            var t = ""; if (void 0 === e) { var i = this.getMeridiem(); t = "PM" === i ? "AM" : "PM" } else t = e; this.meridiemElem.text(t), this.selectedMeridiem = t
        },
        getMeridiem: function () {
            return this.meridiemElem.text()
        },
        setSeconds: function (e) {
            var t = new Date; t.setSeconds(e); var i = t.getSeconds(), s = this.parseSecMin(i); this.secondsElem.val(s), this.selectedSec = s
        },
        getSeconds: function () {
            var e = new Date; return e.setSeconds(this.secondsElem.val()), e.getSeconds()
        },
        parseMeridiem: function (e) {
            return e > 12 ? "PM" : "AM"
        },
        handleTimeAdjustments: function (e) {
            var t = 0;

            this.hoursElem.on("change", { WPicker: this }, function (e) {
                if (!isNaN(parseFloat($(this).val()))) {
                    e.data.WPicker.setHours(e.data.WPicker.getHours());
                }
                else {
                    e.data.WPicker.setHours("00");
                }

                e.data.WPicker.setText(e);
            });

            $(".wickedpicker__controls__control--minutes").on("change", function () {
                if (!isNaN(parseFloat($(this).val()))) {
                    _this.setMinutes(_this.getMinutes());
                }
                else {
                    _this.setMinutes("00");
                }
                _this.setText(e);
            });

            $(".wickedpicker__controls__control--seconds").on("change", function () {
                if (!isNaN(parseFloat($(this).val()))) {
                    _this.setSeconds(_this.getSeconds());
                }
                else {
                    _this.setSeconds("00");
                }
                _this.setText(e);
            });

            $(this.up).add(this.down).off("mousedown click touchstart").on("mousedown click", { Wickedpicker: this, input: e }, function (e) {
                var i = this.className.indexOf("up") > -1 ? "+" : "-", s = e.data;
                "mousedown" == e.type ? t = setInterval($.proxy(function (e) {
                    e.Wickedpicker.changeValue(i, e.input, this)
                }, this, { Wickedpicker: s.Wickedpicker, input: s.input }), 200) : s.Wickedpicker.changeValue(i, s.input, this)
            }).bind("mouseup touchend", function () {
                clearInterval(t)
            })


        }, changeValue: function (operator, input, clicked) {
            var target = input;
            var targetClass = $(target).attr("class");
            if (operator != "") {
                target = "+" === operator ? clicked.nextSibling : clicked.previousSibling;
                targetClass = $(target).attr("class");
            }
            targetClass.endsWith("hours") ? this.setHours(eval(this.getHours() + operator + 1)) : targetClass.endsWith("minutes") ? this.setMinutes(eval(this.getMinutes() + operator + this.options.minutesInterval)) : targetClass.endsWith("seconds") ? this.setSeconds(eval(this.getSeconds() + operator + this.options.secondsInterval)) : this.setMeridiem(),
            this.setText(input)
        },
        setText: function (e) {
            if (!isNaN(this.selectedHour) && !isNaN(this.selectedMin)) {
                $(e).val(this.formatTime(this.selectedHour, this.selectedMin, this.selectedMeridiem, this.selectedSec)).change();
            }
        },
        getText: function (e) {
            return $(e).val()
        },
        formatTime: function (e, t, i, s) {
            var n = e + ":" + t;
            return this.options.twentyFour && (n = e + ":" + t), this.options.showSeconds && (n += ":" + s), this.options.twentyFour === !1 && (n += " " + i), n
        },
        setHoverState: function () {
            var e = this; isMobile() || $(this.up).add(this.down).add(this.close).hover(function () { $(this).toggleClass(e.options.hoverState) })
        },
        makePickerInputClearable: function (e) {
            $(e).wrap('<div class="clearable-picker"></div>').after("<span data-clear-picker>&times;</span>"), $("[data-clear-picker]").on("click", function (e) { $(this).siblings(".hasWickedpicker").val("") })
        },
        timeArrayFromString: function (e) {
            if (e.length) {
                var t = e.replace(/:/g, " ").split(" "); return t[2] = t.length < 3 ? "00" : t[2], t
            } return !1
        },
        _time: function () {
            var e = $(this.element).val(); return "" === e ? this.formatTime(this.selectedHour, this.selectedMin, this.selectedMeridiem, this.selectedSec) : e
        },
        _destroy: function () {
            $('.wickedpicker').remove();
            $(this.element).removeClass("hasWickedpicker");
            $(this.element).removeAttr('onkeypress');
            $(this.element).removeAttr('aria-showingpicker');
            $(this.element).unbind();
        }
    }),

    $.fn[pluginName] = function (e, t) {
        if ($.isFunction(Wickedpicker.prototype["_" + e])) {
            if ($(this).hasClass("hasWickedpicker")) {
                if (void 0 !== t) {
                    return $.data($(this)[t], "plugin_" + pluginName)["_" + e]();
                }
                else {
                    return $.data($(this)[0], "plugin_" + pluginName)["_" + e]();
                }
            }
            else {
                return void 0;
            }
        }
        else {
            //   console.log('not attached area');
            return this.each(function () { $.data(this, "plugin_" + pluginName, new Wickedpicker(this, e)) });
            //return this.each(function () { $.data(this, "plugin_" + pluginName) || $.data(this, "plugin_" + pluginName, new Wickedpicker(this, e)) });
        }
    }
}(jQuery, window, document);*/